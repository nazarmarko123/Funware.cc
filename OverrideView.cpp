#include "hooks.h"
#include "global.h"
#include "Menu.h"
#include "sdk.h"
#include "GrenadePrediction.h"




bool ClientVariables::Save(std::string file_name)
{
	CreateDirectory("C:\\Azu", NULL);

	std::string file_path = "C:\\Azu\\" + file_name + ".cfg";

	std::fstream file(file_path, std::ios::out | std::ios::in | std::ios::trunc);
	file.close();

	file.open(file_path, std::ios::out | std::ios::in);
	if (!file.is_open())
	{
		file.close();
		return false;
	}

	const size_t settings_size = sizeof(ClientVariables);
	for (int i = 0; i < settings_size; i++)
	{
		byte current_byte = *reinterpret_cast<byte*>(uintptr_t(this) + i);
		for (int x = 0; x < 8; x++)
		{
			file << (int)((current_byte >> x) & 1);
		}
	}

	file.close();

	return true;
}
bool ClientVariables::Load(std::string file_name)
{


	std::string file_path = "C:\\Azu\\" + file_name + ".cfg";

	std::fstream file;
	file.open(file_path, std::ios::out | std::ios::in);
	if (!file.is_open())
	{
		file.close();
		return false;
	}

	std::string line;
	while (file)
	{
		std::getline(file, line);

		const size_t settings_size = sizeof(ClientVariables);
		if (line.size() > settings_size * 8)
		{
			file.close();
			return false;
		}
		for (int i = 0; i < settings_size; i++)
		{
			byte current_byte = *reinterpret_cast<byte*>(uintptr_t(this) + i);
			for (int x = 0; x < 8; x++)
			{
				if (line[(i * 8) + x] == '1')
					current_byte |= 1 << x;
				else
					current_byte &= ~(1 << x);
			}
			*reinterpret_cast<byte*>(uintptr_t(this) + i) = current_byte;
		}
	}

	file.close();

	return true;
}
void ClientVariables::CreateConfig(std::string name)
{
	CreateDirectory("C:\\Azu\\", NULL); CreateDirectory("C:\\Azu\\", NULL);

	std::ofstream ofs("C:\\Azu\\" + name + ".cfg");

}
char* string_as_array(std::string* str);
char* string_as_array(std::string* str)
{
	return str->empty() ? NULL : &*str->begin();
}
std::vector<std::string> ClientVariables::GetConfigs()
{
	std::vector<std::string> configs;

	WIN32_FIND_DATA ffd;
	auto directory = "C:\\Shonax\\*";
	auto hFind = FindFirstFile(directory, &ffd);

	while (FindNextFile(hFind, &ffd))
	{
		if (!(ffd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))
		{
			std::string file_name = ffd.cFileName;
			if (file_name.size() < 4) // .cfg
				continue;

			std::string end = file_name;
			end.erase(end.begin(), end.end() - 4); // erase everything but the last 4 letters
			if (end != ".cfg")
				continue;

			file_name.erase(file_name.end() - 4, file_name.end()); // erase the .cfg part
			configs.push_back(file_name);
		}
	}

	return configs;
}





ClientVariables* Clientvariables = new ClientVariables();

void __fastcall Hooks::OverrideView(void* _this, void* _edx, CViewSetup* setup)
{
	if (g_pEngine->IsInGame() && g_pEngine->IsConnected()) {
		if (G::LocalPlayer && G::LocalPlayer->IsScoped() && G::LocalPlayer->GetHealth() > 0) {
			setup->fov += 50;//Clientvariables->Misc.PlayerFOV;
		}
	}
	grenade_prediction::instance().View(setup);

	clientmodeVMT->GetOriginalMethod<OverrideViewFn>(18)(_this, setup);
}

float __stdcall GGetViewModelFOV()
{
	float fov = g_pClientModeHook->GetMethod<oGetViewModelFOV>(35)();

	if (g_pEngine->IsConnected() && g_pEngine->IsInGame()) {
		if (G::LocalPlayer && G::LocalPlayer->IsScoped()) {
			fov += Clientvariables->Misc.PlayerViewmodel;
		}
	}
	return fov;
}























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































