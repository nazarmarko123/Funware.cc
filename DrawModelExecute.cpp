#include "hooks.h"
#include "Menu.h"
#include "global.h"
#include "MaterialHelper.h"
#include "xor.h"
#include "GameUtils.h"
#include "BacktrackingHelper.h"
#include "ESP.h"
void __fastcall Hooks::scene_end(void* thisptr, void* edx) {


	static auto scene_end_o = renderviewVMT->GetOriginalMethod< decltype(&scene_end) >(9);
	scene_end_o(thisptr, edx);




	std::ofstream("csgo\\materials\\regular_reflective.vmt") << R"#("VertexLitGeneric" {
      "$basetexture" "vgui/white_additive"
      "$ignorez" "0"
      "$envmap" "env_cubemap"
      "$normalmapalphaenvmapmask" "1"
      "$envmapcontrast"  "1"
      "$nofog" "1"
      "$model" "1"
      "$nocull" "0"
      "$selfillum" "1"
      "$halflambert" "1"
      "$znearer" "0"
      "$flat" "1" 
}
)#";
	std::ofstream("csgo\\materials\\simple_regular_reflective.vmt") << R"#("VertexLitGeneric" {
      "$basetexture" "vgui/white_additive"
      "$ignorez" "0"
      "$envmap" "env_cubemap"
      "$normalmapalphaenvmapmask" "1"
      "$envmapcontrast"  "1"
      "$nofog" "1"
      "$model" "1"
      "$nocull" "0"
      "$selfillum" "1"
      "$halflambert" "1"
      "$znearer" "0"
      "$flat" "1" 
}
)#";


	if (Clientvariables->Visuals.ChamsEnable)
	{

		static IMaterial* CoveredLit = g_MaterialHelper->CreateMaterial(true);
		static IMaterial* OpenLit = g_MaterialHelper->CreateMaterial(false);
		static IMaterial* CoveredFlat = g_MaterialHelper->CreateMaterial(true, false);
		static IMaterial* OpenFlat = g_MaterialHelper->CreateMaterial(false, false);
		static IMaterial* covered;
		static IMaterial* open;

		if (Clientvariables->Visuals.ChamsStyle == 0)
		{
			covered = CoveredFlat;
			open = OpenFlat;
		}
		if (Clientvariables->Visuals.ChamsStyle == 1)
		{
			covered = g_pMaterialSystem->FindMaterial("models/inventory_items/cologne_prediction/cologne_prediction_glass", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/inventory_items/cologne_prediction/cologne_prediction_glass", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 2)
		{
			covered = g_pMaterialSystem->FindMaterial("models/inventory_items/trophy_majors/crystal_clear", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/inventory_items/trophy_majors/crystal_clear", nullptr);
		}
		
		if (Clientvariables->Visuals.ChamsStyle == 3)
		{
			covered = g_pMaterialSystem->FindMaterial("models/inventory_items/dogtags/dogtags_lightray", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/inventory_items/dogtags/dogtags_lightray", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 4)
		{
			covered = g_pMaterialSystem->FindMaterial("models/inventory_items/dogtags/dogtags_outline", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/inventory_items/dogtags/dogtags_outline", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 5)
		{
			covered = g_pMaterialSystem->FindMaterial("models/inventory_items/dreamhack_trophies/dreamhack_star_blur", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/inventory_items/dreamhack_trophies/dreamhack_star_blur", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 6)
		{
			covered = g_pMaterialSystem->FindMaterial("models/inventory_items/trophy_majors/gloss", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/inventory_items/trophy_majors/gloss", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 7)
		{
			covered = g_pMaterialSystem->FindMaterial("models/inventory_items/trophy_majors/crystal_blue", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/inventory_items/trophy_majors/crystal_blue", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 8)
		{
			covered = g_pMaterialSystem->FindMaterial("models/props_shacks/fishing_net01", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/props_shacks/fishing_net01", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 9)
		{
			covered = g_pMaterialSystem->FindMaterial("models/inventory_items/contributor_map_tokens/contributor_charset_color", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/inventory_items/contributor_map_tokens/contributor_charset_color", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 10)
		{
			covered = g_pMaterialSystem->FindMaterial("models/props_foliage/urban_tree03_branches", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/props_foliage/urban_tree03_branches", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 11)
		{
			covered = g_pMaterialSystem->FindMaterial("models/extras/speech_info", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/extras/speech_info", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 12)
		{
			covered = g_pMaterialSystem->FindMaterial("models/inventory_items/music_kit/darude_01/mp3_detail", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/inventory_items/music_kit/darude_01/mp3_detail", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 13)
		{
			covered = g_pMaterialSystem->FindMaterial("models/player/ct_fbi/ct_fbi_glass", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/player/ct_fbi/ct_fbi_glass", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 14)
		{
			covered = g_pMaterialSystem->FindMaterial("models/inventory_items/trophy_majors/gold", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/inventory_items/trophy_majors/gold", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 15)
		{
			covered = g_pMaterialSystem->FindMaterial("models/gibs/glass/glass", nullptr);
			open = g_pMaterialSystem->FindMaterial("models/gibs/glass/glass", nullptr);
		}
		if (Clientvariables->Visuals.ChamsStyle == 16)
		{
			covered = g_pMaterialSystem->FindMaterial("vgui/achievements/glow", nullptr);
			open = g_pMaterialSystem->FindMaterial("vgui/achievements/glow", nullptr);
		}


		IMaterial* material = nullptr;
		IMaterial * visible = g_pMaterialSystem->FindMaterial("cstm_visible", TEXTURE_GROUP_MODEL);

		Vector angle_stored;
		Vector origin_stored;
		tick_record new_record;

		auto b_IsThirdPerson = *reinterpret_cast<bool*>(reinterpret_cast<DWORD>(g_pInput) + 0xA5);

		for (int i = 1; i < g_pEngine->GetMaxClients(); ++i) {
			CBaseEntity* ent = (CBaseEntity*)g_pEntitylist->GetClientEntity(i);

			if (ent == G::LocalPlayer && G::LocalPlayer != nullptr)
			{
				if (G::LocalPlayer->isAlive())
				{
					if (b_IsThirdPerson && Clientvariables->Visuals.FakeAngleGhost != 0)
					{
						Vector OrigAng;
						OrigAng = ent->GetEyeAngles();

						if (Clientvariables->Visuals.FakeAngleGhost == 1)
							ent->SetAngle2(Vector(0, G::FakeAngle.y, 0));
						else
							ent->SetAngle2(Vector(0, G::LocalPlayer->LowerBodyYaw(), 0));

						g_pRenderView->SetColorModulation(Clientvariables->Colors.FakeAngleGhost);
						g_pModelRender->ForcedMaterialOverride(visible);
						ent->draw_model(0x1, 200);
						g_pModelRender->ForcedMaterialOverride(nullptr);
						ent->SetAngle2(OrigAng);
					}
				}
			}
			static IMaterial* ignorez = g_MaterialHelper->CreateMaterial(true, true, false);
			static IMaterial* notignorez = g_MaterialHelper->CreateMaterial(false, true, false);

			bool is_local_player = G::LocalPlayer;

			if (!Clientvariables->Visuals.LocalChams1 && is_local_player)
				continue;

			if (is_local_player && Clientvariables->Visuals.LocalChams1)
			{

				g_pRenderView->SetColorModulation(Clientvariables->Visuals.lvmodel_col); //255, 40, 200
				g_pModelRender->ForcedMaterialOverride(notignorez);
				g_pModelRender->ForcedMaterialOverride(nullptr);
			}

				if (Clientvariables->Visuals.metallicchams)
				{
					ignorez = g_pMaterialSystem->FindMaterial("simple_ignorez_reflective", TEXTURE_GROUP_MODEL);
					notignorez = g_pMaterialSystem->FindMaterial("simple_regular_reflective", TEXTURE_GROUP_MODEL);
				}
				else
				{
					notignorez = g_pMaterialSystem->FindMaterial("simple_regular", TEXTURE_GROUP_MODEL);
					ignorez = g_pMaterialSystem->FindMaterial("simple_ignorez", TEXTURE_GROUP_MODEL);
				}

			


			if (ent->IsValidRenderable() && Clientvariables->Visuals.ChamsPlayer)
			{






				if (Clientvariables->Visuals.ChamsPlayerWall)
				{




					g_pRenderView->SetColorModulation(Clientvariables->Colors.PlayerChamsWall);
					g_pModelRender->ForcedMaterialOverride(covered);
					ent->draw_model(0x1/*STUDIO_RENDER*/, 255);
					g_pModelRender->ForcedMaterialOverride(nullptr);


				}
				g_pRenderView->SetColorModulation(Clientvariables->Colors.PlayerChams);
				g_pModelRender->ForcedMaterialOverride(open);
				ent->draw_model(0x1/*STUDIO_RENDER*/, 255);
				g_pModelRender->ForcedMaterialOverride(nullptr);


			}
			if (ent != nullptr && ent == G::LocalPlayer && Clientvariables->Visuals.LocalChams)
			{
				g_pRenderView->SetColorModulation(Clientvariables->Colors.LocalChams);
				g_pModelRender->ForcedMaterialOverride(open);
				ent->draw_model(0x1, 255);
				g_pModelRender->ForcedMaterialOverride(nullptr);
			}
		}
	}
}




void __fastcall Hooks::DrawModelExecute(void* ecx, void* edx, void* * ctx, void *state, const ModelRenderInfo_t &pInfo, matrix3x4_t *pCustomBoneToWorld)
{
	if (!G::LocalPlayer)
	{
		modelrenderVMT->GetOriginalMethod<DrawModelExecuteFn>(21)(ecx, ctx, state, pInfo, pCustomBoneToWorld);
		return;
	}

	const char* ModelName = g_pModelInfo->GetModelName((model_t*)pInfo.pModel);

	static IMaterial* pWireframeMaterial = g_MaterialHelper->CreateMaterial(false, false, true);
	static IMaterial* OpenFlat = g_MaterialHelper->CreateMaterial(false, false);
	static IMaterial* Glass1 = g_pMaterialSystem->FindMaterial("models/inventory_items/cologne_prediction/cologne_prediction_glass", nullptr);
	static IMaterial* Crystalclear = g_pMaterialSystem->FindMaterial("models/inventory_items/trophy_majors/crystal_clear", nullptr);




	static IMaterial* Lighttray = g_pMaterialSystem->FindMaterial("models/inventory_items/dogtags/dogtags_lightray", nullptr);
	static IMaterial* Lighttraydouble = g_pMaterialSystem->FindMaterial("models/inventory_items/dogtags/dogtags_outline", nullptr);

	static IMaterial* Dreamhack = g_pMaterialSystem->FindMaterial("models/inventory_items/dreamhack_trophies/dreamhack_star_blur", nullptr);

	static IMaterial* Gloss = g_pMaterialSystem->FindMaterial("models/inventory_items/trophy_majors/gloss", nullptr);
	static IMaterial* Crystalblue = g_pMaterialSystem->FindMaterial("models/inventory_items/trophy_majors/crystal_blue", nullptr);
	static IMaterial* fish = g_pMaterialSystem->FindMaterial("models/props_shacks/fishing_net01", nullptr);
	static IMaterial* charset = g_pMaterialSystem->FindMaterial("models/inventory_items/contributor_map_tokens/contributor_charset_color", nullptr);
	static IMaterial* urban = g_pMaterialSystem->FindMaterial("models/props_foliage/urban_tree03_branches", nullptr);
	static IMaterial* speech = g_pMaterialSystem->FindMaterial("models/extras/speech_info", nullptr);
	static IMaterial* mp3det = g_pMaterialSystem->FindMaterial("models/inventory_items/music_kit/darude_01/mp3_detail", nullptr);

	static IMaterial* glow = g_pMaterialSystem->FindMaterial("vgui/achievements/glow", nullptr);

	static IMaterial* darkchrome = g_pMaterialSystem->FindMaterial("models/gibs/glass/glass", nullptr);

	static IMaterial* gold = g_pMaterialSystem->FindMaterial("models/inventory_items/trophy_majors/gold", nullptr);

	static IMaterial* glass = g_pMaterialSystem->FindMaterial("models/player/ct_fbi/ct_fbi_glass", nullptr);













	if (G::LocalPlayer->IsScoped())
	{

		if (strstr(ModelName, "models/player"))
		{
			g_pRenderView->SetBlend(0.5f);
		}
	}

	if (!*(bool*)((DWORD)g_pInput + 0xA5)) { // Thirdperson

		if (Clientvariables->Visuals.WeaponChams && strstr(ModelName, "models/weapons/v_") && !strstr(ModelName, "arms"))
		{
			g_pRenderView->SetColorModulation(Clientvariables->Colors.ChamsWeapon);
			g_pRenderView->SetBlend(0.7f);
			if (Clientvariables->Visuals.stylexd==0)
				g_pModelRender->ForcedMaterialOverride(OpenFlat);
			if (Clientvariables->Visuals.stylexd == 1)
				g_pModelRender->ForcedMaterialOverride(Glass1);
			if (Clientvariables->Visuals.stylexd == 2)
				g_pModelRender->ForcedMaterialOverride(Crystalclear);
			if (Clientvariables->Visuals.stylexd == 3)
				g_pModelRender->ForcedMaterialOverride(Lighttray);
			if (Clientvariables->Visuals.stylexd == 4)
				g_pModelRender->ForcedMaterialOverride(Lighttraydouble);
			if (Clientvariables->Visuals.stylexd == 5)
				g_pModelRender->ForcedMaterialOverride(Dreamhack);
			if (Clientvariables->Visuals.stylexd == 6)
				g_pModelRender->ForcedMaterialOverride(Gloss);
			if (Clientvariables->Visuals.stylexd == 7)
				g_pModelRender->ForcedMaterialOverride(Crystalblue);
			if (Clientvariables->Visuals.stylexd == 8)
				g_pModelRender->ForcedMaterialOverride(fish);
			if (Clientvariables->Visuals.stylexd == 9)
				g_pModelRender->ForcedMaterialOverride(charset);
			if (Clientvariables->Visuals.stylexd == 10)
				g_pModelRender->ForcedMaterialOverride(urban);
			if (Clientvariables->Visuals.stylexd == 11)
				g_pModelRender->ForcedMaterialOverride(speech);
			if (Clientvariables->Visuals.stylexd == 12)
				g_pModelRender->ForcedMaterialOverride(mp3det);
			if (Clientvariables->Visuals.stylexd == 13)
				g_pModelRender->ForcedMaterialOverride(glass);
			if (Clientvariables->Visuals.stylexd == 14)
				g_pModelRender->ForcedMaterialOverride(gold);
			if (Clientvariables->Visuals.stylexd == 15)
				g_pModelRender->ForcedMaterialOverride(darkchrome);
			if (Clientvariables->Visuals.stylexd == 16)
				g_pModelRender->ForcedMaterialOverride(glow);



			


			modelrenderVMT->GetOriginalMethod<DrawModelExecuteFn>(21)(ecx, ctx, state, pInfo, pCustomBoneToWorld);


			if (Clientvariables->Visuals.WeaponWireframe)
			{
				g_pRenderView->SetColorModulation(Clientvariables->Colors.WireframeWeapon);
				g_pRenderView->SetBlend(1.f);
				g_pModelRender->ForcedMaterialOverride(pWireframeMaterial);

			}
		}
	}

	if (Clientvariables->Visuals.ChamsHands && strstr(ModelName, XorStr("arms")))
	{
		g_pRenderView->SetColorModulation(Clientvariables->Colors.ChamsHand);
		g_pRenderView->SetBlend(1.f);
		if (Clientvariables->Visuals.stylexd == 0)
			g_pModelRender->ForcedMaterialOverride(OpenFlat);
		if (Clientvariables->Visuals.stylexd == 1)
			g_pModelRender->ForcedMaterialOverride(Glass1);
		if (Clientvariables->Visuals.stylexd == 2)
			g_pModelRender->ForcedMaterialOverride(Crystalclear);
		if (Clientvariables->Visuals.stylexd == 3)
			g_pModelRender->ForcedMaterialOverride(Lighttray);
		if (Clientvariables->Visuals.stylexd == 4)
			g_pModelRender->ForcedMaterialOverride(Lighttraydouble);
		if (Clientvariables->Visuals.stylexd == 5)
			g_pModelRender->ForcedMaterialOverride(Dreamhack);
		if (Clientvariables->Visuals.stylexd == 6)
			g_pModelRender->ForcedMaterialOverride(Gloss);
		if (Clientvariables->Visuals.stylexd == 7)
			g_pModelRender->ForcedMaterialOverride(Crystalblue);
		if (Clientvariables->Visuals.stylexd == 8)
			g_pModelRender->ForcedMaterialOverride(fish);
		if (Clientvariables->Visuals.stylexd == 9)
			g_pModelRender->ForcedMaterialOverride(charset);
		if (Clientvariables->Visuals.stylexd == 10)
			g_pModelRender->ForcedMaterialOverride(urban);
		if (Clientvariables->Visuals.stylexd == 11)
			g_pModelRender->ForcedMaterialOverride(speech);
		if (Clientvariables->Visuals.stylexd == 12)
			g_pModelRender->ForcedMaterialOverride(mp3det);

		if (Clientvariables->Visuals.stylexd == 13)
			g_pModelRender->ForcedMaterialOverride(glass);
		if (Clientvariables->Visuals.stylexd == 14)
			g_pModelRender->ForcedMaterialOverride(gold);

		if (Clientvariables->Visuals.stylexd == 15)
			g_pModelRender->ForcedMaterialOverride(darkchrome);
		if (Clientvariables->Visuals.stylexd == 16)
			g_pModelRender->ForcedMaterialOverride(glow);


		if (Clientvariables->Visuals.ChamsHandsWireframe)
		{
			g_pRenderView->SetBlend(0.f);
		}
		modelrenderVMT->GetOriginalMethod<DrawModelExecuteFn>(21)(ecx, ctx, state, pInfo, pCustomBoneToWorld);

		if (Clientvariables->Visuals.ChamsHandsWireframe)
		{
			g_pRenderView->SetColorModulation(Clientvariables->Colors.WireframeHand);
			g_pRenderView->SetBlend(1.f);
			g_pModelRender->ForcedMaterialOverride(pWireframeMaterial);
		}
	}

	modelrenderVMT->GetOriginalMethod<DrawModelExecuteFn>(21)(ecx, ctx, state, pInfo, pCustomBoneToWorld);
	g_pModelRender->ForcedMaterialOverride(NULL);
}

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































